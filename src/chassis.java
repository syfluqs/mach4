import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.Toolkit;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.script.ScriptException;
import javax.swing.JFrame;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * chassis.java
 * 
 * Description:
 * Contains the main gui for mach4. The gui can be skinned by calling akinner.applyskin method.
 *
 * Created on Sep 14, 2012, 2:03:06 PM
 */
/**
 *
 * @author Subham <syfluqs@gmail.com>
 */
public class chassis extends javax.swing.JFrame {

    static boolean debug = false;
    static JFrame frame = null;
    static int gh =0;
    static int gw =0;
    static int height = 0;
    static int width = 0;
    static String jv = "";
    static double jvd = 0;
    static int ww = 0;
    static int wh =0;
    
    /** Creates new form chassis */
    public chassis() throws FileNotFoundException, FileNotFoundException, FileNotFoundException, FileNotFoundException, FileNotFoundException, FileNotFoundException, IOException, InterruptedException, InstantiationException, IllegalAccessException {
        initComponents();
	   
        
        //initialising backbone functions.
        if (debug==true)
        {
        System.out.println();
        System.out.println("Starting Mach4 chassis.");
        System.out.println();
        System.out.println(" == WELCOME MASTER == ");
        System.out.println();
        System.out.println("Inititialising backbone functions.");
        }
        
        commandreader.read("commands.cfg");
        timekeeper.start();
        
        if (debug==true)
        {
        System.out.println("Backbone functions loaded.");
        System.out.println("Rolling out the GUI.");
        }
        skinner.applySkin();
        if (debug==true)
        {
        System.out.println("Applied Skin");
        System.out.println();}
        
        
        //backbone functions loaded.
        
        
        
        try {
            
           String x = (iniparser.iniread("settings.ini","gui","xpos"));
           String y = (iniparser.iniread("settings.ini","gui","ypos"));
           
            if (x.equals("") || y.equals(""))
            {
                Dimension dim = Toolkit.getDefaultToolkit().getScreenSize(); 
                height=dim.height;
                width=dim.width;
                int ypos = height-(gh = getHeight())-skinner.h-60;  //considering taskbar in windows.
                int xpos = width-(gw = getWidth())-skinner.w-20;   //considering scrollbars in windows.
                setBounds(xpos,ypos,skinner.w,skinner.h); 
                

            }
            else
            {
                setBounds(Integer.parseInt(x),Integer.parseInt(y),skinner.w,skinner.h); 
            }
            
            
            
            
        } catch (IOException ex) {
            Logger.getLogger(chassis.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        background.setSize(skinner.w,skinner.h);
        input.setBackground(new Color(255,255,255,0));
        //set alpha-transparency to background.
        setBackground(new Color(255,255,255,0));
        
        try {
            
            if (iniparser.iniread("settings.ini", "gui", "movable").equals("true"))
            {
                
            ComponentMover cm = new ComponentMover(chassis.class,dragger);    //add drageer handle
            cm.setEdgeInsets(new Insets(0,0,-40,-60));    //increase the edge rectangle.
            dragger.setCursor(new Cursor(Cursor.MOVE_CURSOR));
            
            }
        } catch (IOException ex) {
            Logger.getLogger(chassis.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        try {
            
            
            setAlwaysOnTop((iniparser.iniread("settings.ini", "gui", "AlwaysOnTop").equals("true")));   //setting always on top property.
            
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(chassis.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(chassis.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        input = new javax.swing.JTextField();
        dragger = new javax.swing.JLabel();
        okbutton = new javax.swing.JLabel();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("mach4chassis");
        setResizable(false);
        setType(java.awt.Window.Type.UTILITY);
        setUndecorated(true);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        getContentPane().setLayout(null);

        input.setFont(new java.awt.Font("Trebuchet MS", 0, 20)); // NOI18N
        input.setBorder(null);
        input.setOpaque(false);
        input.setSelectionColor(new java.awt.Color(102, 102, 102));
        input.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inputMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                inputMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                inputMouseReleased(evt);
            }
        });
        input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputActionPerformed(evt);
            }
        });
        input.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                inputFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                inputFocusLost(evt);
            }
        });
        input.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputKeyTyped(evt);
            }
        });
        getContentPane().add(input);
        input.setBounds(50, 12, 185, 33);

        dragger.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        dragger.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                draggerMouseDragged(evt);
            }
        });
        getContentPane().add(dragger);
        dragger.setBounds(10, 10, 33, 35);

        okbutton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        okbutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                okbuttonMouseClicked(evt);
            }
        });
        getContentPane().add(okbutton);
        okbutton.setBounds(240, 10, 40, 35);

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/prorotype-3_b.png"))); // NOI18N
        getContentPane().add(background);
        background.setBounds(0, 0, 290, 60);


		
        pack();
		
		
		
    }// </editor-fold>//GEN-END:initComponents

private void draggerMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_draggerMouseDragged

}//GEN-LAST:event_draggerMouseDragged

private void inputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inputMouseClicked

}//GEN-LAST:event_inputMouseClicked

private void inputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inputFocusGained


    

    
    if (input.getText().length()!=0)
{
    input.setCaretPosition(input.getText().length());
    input.setSelectionStart(0);
    
    
    
}
}//GEN-LAST:event_inputFocusGained

private void inputMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inputMouseReleased
// TODO add your handling code here:
}//GEN-LAST:event_inputMouseReleased

private void inputMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inputMousePressed
if (input.getText().length()!=0)
{
    input.setCaretPosition(input.getText().length());
    input.setSelectionStart(0);
    
    
    
}
}//GEN-LAST:event_inputMousePressed

private void inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputActionPerformed
        
    
    String in = input.getText();
    
    try {
            try {
                try {
                    processor.process(in);
                } catch (ScriptException ex) {
                    Logger.getLogger(chassis.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(chassis.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(chassis.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            history.add(in);
            
            
        } catch (IOException ex) {
            Logger.getLogger(chassis.class.getName()).log(Level.SEVERE, null, ex);
        }
            

        
        if (input.getText().length()!=0)
{
    input.setCaretPosition(input.getText().length());
    input.setSelectionStart(0);
}
        
}//GEN-LAST:event_inputActionPerformed

private void okbuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okbuttonMouseClicked
    

            
    
    String in = input.getText();
    
    try {
            try {
                try {
                    processor.process(in);
                } catch (ScriptException ex) {
                    Logger.getLogger(chassis.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(chassis.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(chassis.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            history.add(in);
            
        } catch (IOException ex) {
            Logger.getLogger(chassis.class.getName()).log(Level.SEVERE, null, ex);
        }
            
        
        if (input.getText().length()!=0)
{
    input.setCaretPosition(input.getText().length());
    input.setSelectionStart(0);
    
    
    
}
    
    
}//GEN-LAST:event_okbuttonMouseClicked

private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained


    
    

    
    if (input.getText().length()!=0)
{
    input.setCaretPosition(input.getText().length());
    input.setSelectionStart(0);
    
}
}//GEN-LAST:event_formFocusGained

private void inputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputKeyPressed

}//GEN-LAST:event_inputKeyPressed

private void inputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputKeyTyped
        
    
      
}//GEN-LAST:event_inputKeyTyped

private void inputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputKeyReleased
int k = evt.getKeyCode();
        
        if (k==40)  //down key pressed.
        {
            
            input.setText(history.next());

            
            
        }
        else
        {
            if (k==38)  //up key pressed.
            {
                
                input.setText(history.prev());

                
            }
        }
        

}//GEN-LAST:event_inputKeyReleased

private void inputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inputFocusLost

}//GEN-LAST:event_inputFocusLost

private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus

}//GEN-LAST:event_formWindowGainedFocus

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws FileNotFoundException, IOException {

        if (args[0].equals("debug"))
        debug=true;
        
        // get window width and height and store in skinner.h and skinner.w
        skinner.getWsize();
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(chassis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(chassis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(chassis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(chassis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
               
                 try {
                    try {
                        frame = new chassis();
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(chassis.class.getName()).log(Level.SEVERE, null, ex);
                    }catch (InterruptedException ex) {
                        Logger.getLogger(chassis.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (InstantiationException ex) {
                        Logger.getLogger(chassis.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IllegalAccessException ex) {
                        Logger.getLogger(chassis.class.getName()).log(Level.SEVERE, null, ex);
                    }
                        
                    
                        
                        frame.setVisible(true);
                        
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(chassis.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(chassis.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JLabel background;
    public static javax.swing.JLabel dragger;
    public static javax.swing.JTextField input;
    public static javax.swing.JLabel okbutton;
    // End of variables declaration//GEN-END:variables


    }

