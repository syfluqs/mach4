
import java.awt.Color;
import java.awt.Insets;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * widget_notes.java
 *
 * Created on Oct 2, 2012, 12:35:04 PM
 */
/**
 *
 * @author Subham
 */
public class widget_notes extends javax.swing.JFrame {

    static int dura = 0;
    
    /** Creates new form widget_notes */
    public widget_notes() throws IOException {
        initComponents();
        
        try{dura = (int)(Long.parseLong(iniparser.iniread("settings.ini", "notes_widget", "auto_save_duration")))*60000;}
        catch (Exception e){dura = 120000;if (chassis.debug==true)System.out.println("Error in reading auto_save_duration value. found="+iniparser.iniread("settings.ini", "notes_widget", "auto_save_duration"));}
        
        //furnishers
        back.setIcon(new ImageIcon("pics\\widget_notes_back.png"));
        setSize(256,256);
        setBackground(new Color(0,0,0,0));
        ComponentMover cm = new ComponentMover(widget_notes.class,dragger);
        cm.setEdgeInsets(new Insets(0,0,-40,-60));    //increase the edge rectangle.
        jTextArea1.setBackground(new Color(0,0,0,0));
        //jScrollPane1.setBackground(new Color(0,0,0,0));
        jScrollPane1.setOpaque(false);
        jScrollPane1.getViewport().setOpaque(false);
        jScrollPane1.setBorder(BorderFactory.createEmptyBorder());
        //hiding uncompleted compnents.
        next.setVisible(false);
        prev.setVisible(false);
        indicator.setVisible(false);
        //ended furnishing
        
        //--work on the position--
        //NOTE: running widget_notes.java without running chassis.java will result in wrong positioning 
        //as chassis.width and chassis.height variables are neede.
        setLocation(chassis.width-getWidth(),(int)(0.55*chassis.height));
        if (chassis.debug==true)
        System.out.println(timekeeper.time+" Setting notes location: "+(chassis.width-getWidth())+","+(int)(0.15*chassis.height));
        //positioning complete
        
        //read the notes and append them in the textarea
        read();
        //reading complete.
        
        //start autosaver
        TimerTask auto_save = new TimerTask()
        {
          public void run()
          {
              save(false);
              
          }
        };
        
        Timer autosaver = new Timer();
        
        autosaver.schedule(auto_save, 120000, 120000);
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closer = new javax.swing.JLabel();
        saver = new javax.swing.JLabel();
        dragger = new javax.swing.JLabel();
        prev = new javax.swing.JLabel();
        indicator = new javax.swing.JLabel();
        next = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        back = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		
        if (chassis.jvd>=1.7)
			setType(java.awt.Window.Type.UTILITY);
		else
			System.out.println("windget_notes: Utiltiy window type not supported.");
			
        setUndecorated(true);
        getContentPane().setLayout(null);

        closer.setForeground(new java.awt.Color(255, 0, 0));
        closer.setText("x");
        closer.setToolTipText("Save and Close");
        closer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closerMouseClicked(evt);
            }
        });
        getContentPane().add(closer);
        closer.setBounds(210, 20, 10, 14);

        saver.setForeground(new java.awt.Color(0, 0, 204));
        saver.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        saver.setText("s");
        saver.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saverMouseClicked(evt);
            }
        });
        getContentPane().add(saver);
        saver.setBounds(194, 20, 10, 14);

        dragger.setFont(new java.awt.Font("Ubuntu Light", 1, 14)); // NOI18N
        dragger.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dragger.setText("Notes");
        dragger.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        getContentPane().add(dragger);
        dragger.setBounds(10, 10, 230, 30);

        prev.setBackground(new java.awt.Color(255, 255, 0));
        prev.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        prev.setText("<--");
        prev.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        prev.setOpaque(true);
        getContentPane().add(prev);
        prev.setBounds(30, 230, 30, 14);

        indicator.setBackground(new java.awt.Color(255, 255, 0));
        indicator.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(indicator);
        indicator.setBounds(100, 230, 50, 20);

        next.setBackground(new java.awt.Color(255, 255, 0));
        next.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        next.setText("-->");
        next.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        next.setOpaque(true);
        getContentPane().add(next);
        next.setBounds(190, 230, 30, 14);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setToolTipText("");
        jScrollPane1.setViewportBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane1.setOpaque(false);

        jTextArea1.setBackground(new java.awt.Color(255, 102, 0));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Ubuntu Light", 0, 13)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jTextArea1.setOpaque(false);
        jTextArea1.setSelectionColor(new java.awt.Color(153, 153, 153));
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(20, 50, 210, 180);
        getContentPane().add(back);
        back.setBounds(0, 0, 256, 256);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void closerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closerMouseClicked
save(true);
        
}//GEN-LAST:event_closerMouseClicked

private void saverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saverMouseClicked
save(false);
}//GEN-LAST:event_saverMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(widget_notes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(widget_notes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(widget_notes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(widget_notes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    new widget_notes().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(widget_notes.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel back;
    private javax.swing.JLabel closer;
    private javax.swing.JLabel dragger;
    private javax.swing.JLabel indicator;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel next;
    private javax.swing.JLabel prev;
    private javax.swing.JLabel saver;
    // End of variables declaration//GEN-END:variables

    private void read() throws IOException {
        ArrayList notes = new ArrayList();
        try {
            BufferedReader br = new BufferedReader(new FileReader("notes.nts"));
            String l = "";
            while((l = br.readLine())!=null)
            {
                notes.add(l+"\n");
            }
        } catch (FileNotFoundException ex) {
            BufferedWriter bw = new BufferedWriter(new FileWriter("notes.nts"));
            bw.write("\n");
            bw.flush();
            bw.close();
        }
        
        int i=0;
        for (i=0;i<notes.toArray().length;i++)
        jTextArea1.append(notes.get(i).toString());
        
    }

    private void save(boolean b) {
        BufferedWriter bw = null;
        try {
            
            bw = new BufferedWriter(new FileWriter("notes.nts"));
            bw.write(jTextArea1.getText());
            bw.flush();
            bw.close();
            
            
        } catch (IOException ex) {
            Logger.getLogger(widget_notes.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if (chassis.debug==true)
        System.out.println(timekeeper.time+" notes_widget: Notes saved.");
        
        if (b==true)
        dispose();
    }
}
